import xml.etree.ElementTree as ET
import re

def parse_openvas_results(openvas_results_file):
    vulnerabilities = []
    try:
        tree = ET.parse(openvas_results_file)
        root = tree.getroot()
        for report in root.findall('report'):
            for result in report.findall('result'):
                vulnerability = {
                    'ip_address': result.find('ip').text,
                    'port': result.find('port').text,
                    'service': result.find('service').text,
                    'name': result.find('name').text,
                    'description': result.find('description').text,
                    'severity': result.find('threat').text,
                    'recommendation': result.find('recommendation').text
                }
                vulnerabilities.append(vulnerability)
    except Exception as e:
        print(f"Error parsing OpenVAS results: {e}")
    return vulnerabilities


def parse_nmap_results(nmap_results_file):
    vulnerabilities = []
    try:
        tree = ET.parse(nmap_results_file)
        root = tree.getroot()
        for host in root.findall('host'):
            ip_address = host.find('address').get('addr')
            for port in host.findall('ports/port'):
                service = port.find('service').get('name')
                for script in port.findall('script'):
                    if 'vulners' in script.get('id'):
                        vulnerability = {
                            'ip_address': ip_address,
                            'port': port.get('portid'),
                            'service': service,
                            'name': script.get('id'),
                            'description': script.get('output'),
                            'severity': 'N/A',
                            'recommendation': 'N/A'
                        }
                        vulnerabilities.append(vulnerability)
    except Exception as e:
        print(f"Error parsing Nmap results: {e}")
    return vulnerabilities


def WritetoFile(vulnerabilities, output_file):
    try:
        with open(output_file, 'w') as f:
            for vuln in vulnerabilities:
                f.write(f"IP Address: {vuln['ip_address']}\n")
                f.write(f"Port: {vuln['port']}\n")
                f.write(f"Service: {vuln['service']}\n")
                f.write(f"Name: {vuln['name']}\n")
                f.write(f"Description: {vuln['description']}\n")
                f.write(f"Severity: {vuln['severity']}\n")
                f.write(f"Recommendation: {vuln['recommendation']}\n")
                f.write("\n")  # Separate entries with a blank line
        print(f"Vulnerabilities written to '{output_file}' successfully.")
    except Exception as e:
        print(f"Error writing vulnerabilities to file: {e}")


def XMLDOCConvert(openvas_file, nmap_file):
    output_file = 'parsed_results.txt'
    openvas_vulnerabilities = parse_openvas_results(openvas_file)
    nmap_vulnerabilities = parse_nmap_results(nmap_file)
    all_vulnerabilities = openvas_vulnerabilities + nmap_vulnerabilities
    WritetoFile(all_vulnerabilities,output_file)