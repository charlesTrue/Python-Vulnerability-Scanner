"""
NMAP Vulnerability Scanner for Networks
"""
import subprocess
import xml.etree.ElementTree as ET

"""
function:     run_nmap_vul_scan 
parameters:   target - str 
return value: N/A
description:  function takes a str object as a parameter for the f''. The nmap_command is a CMD command for nmaps that 
              has two tags: --script vulners -oX. --script vulners is a premade nmap script that runs all vulnerability 
              scans on a network's ports to find any potential points that can be used for hacker attacks. -oX is an XML
              writing function that takes the data that is collected from the script and creates an XML document with the
              nextwork's IP address and _vuln_scan.xml to name the file. 
"""


def run_nmap_vuln_scan(target):
    nmap_command = f'nmap --script vulners -oX {target}_vuln_scan.xml {target}'
    subprocess.run(nmap_command, shell=True)


"""
function:     run_nmap_vul_OS 
parameters:   target - str
return value: N/A
description:  function takes a str object as a parameter for the f''. The nmap_command is a CMD command for nmaps that 
              has two tags: -O -oX. -O is a premade nmap script that runs on all ports and returns the operating systems
              of everything on the network. This allows hackers to understand what types of devices are on the network
              and find their vulnerabilities.-oX is an XML writing function that takes the data that is collected from 
              the script and creates an XML document with the network's IP address and _vuln_scan.xml to name the file.
"""


def run_nmap_vuln_OS(target):
    nmap_command = f"nmap -O -oX {target}_vuln_scan.xml {target}"
    subprocess.run(nmap_command, shell=True)


"""
function:     parse_nmap_vuln_scan
parameters:   target - str
return value: vulnerabilities[]
description:  function takes the target_vuln_scan.xml and begins to parse information from the document to find any 
              vulnerabilities and store them into a list, vulnerabilities[]. Using the functions in the python library 
              for XML, the function will scan the XML document for all tags: "host" and begin to search for "address" 
              and get the information of that address. Once it gets the address of tag, the parser will look for all,
              "//script" tags and search within those tags for the script's id and output. This then will be concatenated
              to create an object for the vulnerabilities list and be appended to the list. Will throw an exception if
              there are no files that match the formatting of 'report_file' Finally returns vulnerabilities[] with 
              any vulnerabilities that were detected.
"""


def parse_nmap_vuln_scan(target):
    report_file = f'{target}_vuln_scan.xml'
    vulnerabilities = []
    try:
        tree = ET.parse(report_file)
        root = tree.getroot()
        for host in root.findall('host'):
            addr = host.find('address').get('addr')
            for vuln in host.findall('.//script'):
                script_id = vuln.get('id')
                script_output = vuln.get('output')
                vulnerabilities.append({'host': addr, 'script_id': script_id, 'output': script_output})
    except FileNotFoundError:
        print(f"Could not find {report_file}. Please run the vulnerability scan first.")
    return vulnerabilities


"""
function:     main() 
parameters:   N/A 
return value: N/A
description:  main function that gets a target value and runs both functions 'run_nmap_vuln_OS()' and 'run_nmap_vuln_scan'
              and then creates a vulnerabilities[] object to store the parsed information. Will then iterate through the 
              information stored within vulnerabilities[] in a formatted string. 
"""


def main():
    target = '8.8.8.8'  # Example target IP address
    # run_nmap_vuln_OS(target)
    run_nmap_vuln_scan(target)
    vulnerabilities = parse_nmap_vuln_scan(target)
    print('Vulnerabilities Detected:')
    for vuln in vulnerabilities:
        print(f'Host: {vuln["host"]}, Script ID: {vuln["script_id"]}, Output: {vuln["output"]}')


if __name__ == "__main__":
    main()
