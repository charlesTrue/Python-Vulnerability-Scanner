# ---------------------------------------------
# Programmer: Charles Trouilliere,(Cooper Nathan) ,(Ryan Larson)
# Project Python Vulnerability Scanner Version:1.0
# DateCompleted:
# -------------------------------------------------------------
# Description: vulnerability scanner that automates the
# process of identifying known vulnerabilities in systems or
# websites. By integrating network scanning capabilities using
# Nmap and vulnerability assessment features using OpenVAS,
# the scanner aims to provide security professionals with a tool
# to efficiently assess and mitigate potential
# security risks within their networks.
# Tools Utilzied
# Command to run scanner script
# python vulnerability_scanner.py {TGT IP}/{Port#} --nmap --openvas
# ---------------------------------------------------------------/
import subprocess
from datetime import datetime
import time
import shlex
import tkinter as tk
from tkinter import messagebox


def perform_nmap_scan(targets, custom_command=None):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_filename = f"nmap_scan_{timestamp}.txt"
    if custom_command:
        nmap_command = shlex.split(custom_command) + ['-oN', output_filename] + targets
    else:
        nmap_command = ["nmap", "-sV", "-sS", "-T4", "--script=vulners", "-oN", output_filename] + targets
    print(f"Executing command: {' '.join(nmap_command)}")
    result = subprocess.run(nmap_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    if result.returncode != 0:
        messagebox.showerror("Error", "Nmap scan failed. Please check the target IP addresses and your permissions.")
        return None
    messagebox.showinfo("Scan Completed", f"Nmap scan completed. Results saved to {output_filename}")
    return output_filename


def start_scan():
    global scanning
    scanning = True
    targets = entry_targets.get().split()  # Split by spaces to allow multiple IPs or ranges
    custom_command = entry_custom.get()

    # Initialize interval variables to zero
    interval_minutes = 0
    interval_hours = 0
    interval_days = 0

    # Safely convert interval entries to integers or default to zero
    try:
        if entry_minutes.get():
            interval_minutes = int(entry_minutes.get())
        if entry_hours.get():
            interval_hours = int(entry_hours.get())
        if entry_days.get():
            interval_days = int(entry_days.get())
    except ValueError:
        messagebox.showerror("Input Error", "Please enter valid numbers for intervals.")
        return

    # Calculate total interval in seconds
    interval_seconds = interval_minutes * 60 + interval_hours * 3600 + interval_days * 86400
    if interval_seconds > 0:
        try:
            while scanning:
                output_file = perform_nmap_scan(targets, custom_command)
                if output_file:
                    entry_output.delete(0, tk.END)
                    entry_output.insert(0, output_file)
                time.sleep(interval_seconds)
        except KeyboardInterrupt:
            print("Scan scheduling stopped by user.")
    else:
        output_file = perform_nmap_scan(targets, custom_command)
        if output_file:
            entry_output.delete(0, tk.END)
            entry_output.insert(0, output_file)


def stop_scan():
    global scanning
    scanning = False


window = tk.Tk()
window.title("Python Vulnerability Scanner")

# Create and place widgets
label_targets = tk.Label(window, text="Target(s):")
label_targets.pack()
entry_targets = tk.Entry(window, width=50)
entry_targets.pack()

label_custom = tk.Label(window, text="Custom Nmap Command:")
label_custom.pack()
entry_custom = tk.Entry(window, width=50)
entry_custom.pack()

label_interval = tk.Label(window, text="Scan Interval:")
label_interval.pack()

frame_interval = tk.Frame(window)
frame_interval.pack()

entry_minutes = tk.Entry(frame_interval, width=10)
entry_minutes.pack(side=tk.LEFT)
label_minutes = tk.Label(frame_interval, text="Minutes")
label_minutes.pack(side=tk.LEFT)

entry_hours = tk.Entry(frame_interval, width=10)
entry_hours.pack(side=tk.LEFT)
label_hours = tk.Label(frame_interval, text="Hours")
label_hours.pack(side=tk.LEFT)

entry_days = tk.Entry(frame_interval, width=10)
entry_days.pack(side=tk.LEFT)
label_days = tk.Label(frame_interval, text="Days")
label_days.pack(side=tk.LEFT)

btn_scan = tk.Button(window, text="Start Scan", command=start_scan)
btn_scan.pack()

btn_stop = tk.Button(window, text="Stop Scan", command=stop_scan)
btn_stop.pack()

label_output = tk.Label(window, text="Scan Output File:")
label_output.pack()
entry_output = tk.Entry(window, width=50)
entry_output.pack()

# Run the main loop
window.mainloop()
