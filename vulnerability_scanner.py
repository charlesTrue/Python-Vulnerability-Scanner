# ---------------------------------------------
# Programmer: Charles Trouilliere,(Cooper Nathan) ,(Ryan Larson)
# Project Python Vulnerability Scanner Version:1.0
# DateCompleted:
# -------------------------------------------------------------
# Description: vulnerability scanner that automates the
# process of identifying known vulnerabilities in systems or
# websites. By integrating network scanning capabilities using
# Nmap and vulnerability assessment features using OpenVAS,
# the scanner aims to provide security professionals with a tool
# to efficiently assess and mitigate potential
# security risks within their networks.
# Tools Utilzied
# Command to run scanner script
# python vulnerability_scanner.py {TGT IP}/{Port#} --nmap --openvas
# ---------------------------------------------------------------/
import argparse
import subprocess
from scan import *

# Nmap scan function --------------------------------------------/
def nmap_scan(targets):
    print("Performing Nmap scan...")
    nmap_command = [
        "nmap", "-sV", "-sS", "-T4", "-oX", "nmap_scan.xml", "--script", "mysql-*",
        "--script", "ssh-*", "--script", "http-vuln-*", "--script", "smb-vuln-*",
        "--script", "ftp-vuln-*", "--script", "dns-zone-transfer"
    ] + targets
    subprocess.run(nmap_command, check=True)

# OpenVAS scan function
# OpenVAS (Open Vulnerability Assessment System)
# Implementing OpenVAS in your vulnerability scanner project enhances its
# capabilities by providing a robust and reliable vulnerability assessment solution.
# By combining network scanning with Nmap and vulnerability assessment with OpenVAS,
# your project can offer security professionals a comprehensive toolset for identifying
# and mitigating security risks within their networks effectively
def openvas_scan(targets):
    print("Performing OpenVAS scan...")
    openvas_command = ["openvas", "-o", "openvas_report.xml"] + targets
    subprocess.run(openvas_command, check=True)

# # Parse Nmap results ----------------------------------------------/
# def parse_nmap_results(nmap_results_file):
#     vulnerabilities = []
#     try:
#         tree = ET.parse(nmap_results_file)
#         root = tree.getroot()
#         for host in root.findall('host'):
#             ip_address = host.find('address').get('addr')
#             for port in host.findall('ports/port'):
#                 service = port.find('service').get('name')
#                 for script in port.findall('script'):
#                     if 'vulners' in script.get('id'):
#                         vulnerability = {
#                             'ip_address': ip_address,
#                             'port': port.get('portid'),
#                             'service': service,
#                             'name': script.get('id'),
#                             'description': script.get('output'),
#                             'severity': 'N/A',
#                             'recommendation': 'N/A'
#                         }
#                         vulnerabilities.append(vulnerability)
#     except Exception as e:
#         print(f"Error parsing Nmap results: {e}")
#     return vulnerabilities

# Parse OpenVAS results -------------------------------------------/
# def parse_openvas_results(openvas_results_file):
#     vulnerabilities = []
#     try:
#         tree = ET.parse(openvas_results_file)
#         root = tree.getroot()
#         for report in root.findall('report'):
#             for result in report.findall('result'):
#                 vulnerability = {
#                     'ip_address': result.find('ip').text,
#                     'port': result.find('port').text,
#                     'service': result.find('service').text,
#                     'name': result.find('name').text,
#                     'description': result.find('description').text,
#                     'severity': result.find('threat').text,
#                     'recommendation': result.find('recommendation').text
#                 }
#                 vulnerabilities.append(vulnerability)
#     except Exception as e:
#         print(f"Error parsing OpenVAS results: {e}")
#     return vulnerabilities

# Merge Nmap and OpenVAS results ----------------------------------------------/
def merge_results(nmap_vulnerabilities, openvas_vulnerabilities):
    merged_vulnerabilities = nmap_vulnerabilities + openvas_vulnerabilities
    return merged_vulnerabilities

# Main function -----------------------------------------------------------------//
def main():
    parser = argparse.ArgumentParser(description="Python Vulnerability Scanner")
    parser.add_argument("targets", metavar="TARGET", nargs="+", help="Target IP addresses or ranges")
    parser.add_argument("--nmap", action="store_true", help="Perform Nmap scan")
    parser.add_argument("--openvas", action="store_true", help="Perform OpenVAS scan")
    args = parser.parse_args()

    if not args.nmap and not args.openvas:
        parser.error("Please specify at least one scan type (--nmap, --openvas)")

    if args.nmap:
        nmap_scan(args.targets)

    if args.openvas:
        openvas_scan(args.targets)

    #converting to one vulnernabilty document
    XMLDOCConvert("openvas_report.xml","nmap_scan.xml")


# Ensure this is at the module level, not inside another function or class
if __name__ == "__main__":
    main()