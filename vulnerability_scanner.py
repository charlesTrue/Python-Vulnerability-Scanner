# ---------------------------------------------
# Programmer: Charles Trouilliere,(Cooper Nathan) ,(Ryan Larson)
# Project Python Vulnerability Scanner Version:1.0
# DateCompleted:
# -------------------------------------------------------------
# Description: vulnerability scanner that automates the
# process of identifying known vulnerabilities in systems or
# websites. By integrating network scanning capabilities using
# Nmap and vulnerability assessment features using OpenVAS,
# the scanner aims to provide security professionals with a tool
# to efficiently assess and mitigate potential
# security risks within their networks.
# Tools Utilzied
# Command to run scanner script
# python vulnerability_scanner.py {TGT IP}/{Port#} --nmap --openvas
# ---------------------------------------------------------------/
import argparse
import subprocess
import sys
from datetime import datetime
import time
import shlex

def perform_nmap_scan(targets, custom_command=None):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_filename = f"nmap_scan_{timestamp}.txt"  # Change to .txt for normal output
    if custom_command:
        nmap_command = shlex.split(custom_command) + ['-oN', output_filename] + targets
    else:
        nmap_command = [
            "nmap", "-sV", "-sS", "-T4", "--script=vulners", "-oN", output_filename
        ] + targets
    print(f"Executing command: {' '.join(nmap_command)}")
    result = subprocess.run(nmap_command, check=False)
    if result.returncode != 0:
        print("Nmap scan failed. Please check the target IP addresses and your permissions.")
        sys.exit(1)
    return output_filename

def main():
    parser = argparse.ArgumentParser(description="Enhanced Python Vulnerability Scanner")
    parser.add_argument("targets", metavar="TARGET", nargs="+", help="Target IP addresses or ranges")
    parser.add_argument("--custom", help="Enter a custom Nmap command (without output option)", type=str)
    parser.add_argument("--minutes", help="Schedule automated scans every 'n' minutes", type=int)
    parser.add_argument("--hours", help="Schedule automated scans every 'n' hours", type=int)
    parser.add_argument("--days", help="Schedule automated scans every 'n' days", type=int)
    args = parser.parse_args()

    # Calculate the total seconds from the input
    interval_seconds = 0
    if args.minutes:
        interval_seconds = args.minutes * 60
    elif args.hours:
        interval_seconds = args.hours * 3600
    elif args.days:
        interval_seconds = args.days * 86400

    if interval_seconds > 0:
        try:
            while True:
                output_file = perform_nmap_scan(args.targets, args.custom)
                print(f"Results saved to {output_file}")
                time.sleep(interval_seconds)
        except KeyboardInterrupt:
            print("Scan scheduling stopped by user.")
            sys.exit(0)
    else:
        output_file = perform_nmap_scan(args.targets, args.custom)
        print(f"Results saved to {output_file}")

if __name__ == "__main__":
    main()

