# ---------------------------------------------
# Programmer: Charles Trouilliere,(Cooper Nathan) ,(Ryan Larson)
# Project Python Vulnerability Scanner Version:1.0
# DateCompleted:
# -------------------------------------------------------------
# Description: vulnerability scanner that automates the
# process of identifying known vulnerabilities in systems or
# websites. By integrating network scanning capabilities using
# Nmap and vulnerability assessment features using OpenVAS,
# the scanner aims to provide security professionals with a tool
# to efficiently assess and mitigate potential
# security risks within their networks.
# Tools Utilzied
# Command to run scanner script
# python vulnerability_scanner.py {TGT IP}/{Port#} --nmap --openvas
# ---------------------------------------------------------------/
import argparse
import subprocess
import sys

# Nmap scan function
def perform_nmap_scan(targets):
    print("Performing Nmap scan...")
    nmap_command = [
        "nmap", "-sV", "-sS", "-T4", "--script", "vulners","-oG", "nmap_scan.gnmap"
    ] + targets
    result = subprocess.run(nmap_command, check=False)
    if result.returncode != 0:
        print("Nmap scan failed. Please check the target IP addresses and your permissions.")
        sys.exit(1)

def parse_grepable_results(filename):
    vulnerabilities = []
    try:
        with open(filename, 'r') as file:
            lines = file.readlines()
            for line in lines:
                if line.startswith('#') or line.strip() == '':
                    continue  # Skip comment and empty lines
                parts = line.split()
                ip_address = parts[1]
                vulnerability_info = {
                    'ip_address': ip_address,
                vulnerabilities.append(vulnerability_info)
    except FileNotFoundError:
        print(f"File not found: {filename}")
        sys.exit(1)
    except Exception as e:ii
        print(f"Error reading grepable results: {e}")
                    'data': ' '.join(parts[2:])
                }
        sys.exit(1)
    return vulnerabilities

def write_to_file(vulnerabilities, output_file):
    try:
        with open(output_file, 'w') as f:
            for vuln in vulnerabilities:
                f.write(f"IP Address: {vuln['ip_address']}\n")
                f.write(f"Data: {vuln['data']}\n\n")
        if not vulnerabilities:
            print("No vulnerabilities found.")
        else:
            print(f"Vulnerabilities written to '{output_file}' successfully.")
    except Exception as e:
        print(f"Error writing to file: {e}")
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description="Python Vulnerability Scanner")
    parser.add_argument("targets", metavar="TARGET", nargs="+", help="Target IP addresses or ranges")
    parser.add_argument("--nmap", action="store_true", help="Perform Nmap scan")
    args = parser.parse_args()

    if not args.nmap:
        parser.error("Please specify at least one scan type (--nmap)")
        sys.exit(1)

    if args.nmap:
        perform_nmap_scan(args.targets)

    vulnerabilities = parse_grepable_results("nmap_scan.gnmap")
    write_to_file(vulnerabilities, 'nmap_results.txt')

if __name__ == "__main__":
    main()

# Ensure this is at the module level, not inside another function or class
if __name__ == "__main__":
    main()
